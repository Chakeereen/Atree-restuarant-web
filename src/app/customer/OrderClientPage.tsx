'use client'; // üëà ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ö‡∏≠‡∏Å Next.js ‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Client Component

import { useState, useMemo } from 'react';

import Image from 'next/image';
import { MenuLists, MenuType, OrderDetail } from '@/utils/type';

// Props ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å Server Component
interface OrderPageProps {
  orderInfo: {
    orderNo: number;
    tableNo: number;
  };
  menuTypes: MenuType[];
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
interface CartItem extends OrderDetail {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° name ‡πÅ‡∏•‡∏∞ image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
  name: string;
  image: string;
}

export default function OrderClientPage({ orderInfo, menuTypes }: OrderPageProps) {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const handleAddItem = (menu: MenuLists) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.menuID === menu.menuID);
      if (existingItem) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        return prevCart.map(item =>
          item.menuID === menu.menuID
            ? { ...item, amount: item.amount + 1, totalCost: (item.amount + 1) * item.price }
            : item
        );
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
        const newItem: CartItem = {
          detailNo: 0, // temp value
          orderNo: orderInfo.orderNo,
          menuID: menu.menuID,
          trackOrderID: 1, // default to 'cooking' or 'pending'
          amount: 1,
          price: menu.price,
          totalCost: menu.price,
          dateTime: new Date(),
          updateAT: new Date(),
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
          name: menu.name,
          image: menu.image,
        };
        return [...prevCart, newItem];
      }
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const handleRemoveItem = (menuID: number) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.menuID === menuID);
      if (existingItem && existingItem.amount > 1) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        return prevCart.map(item =>
          item.menuID === menuID
            ? { ...item, amount: item.amount - 1, totalCost: (item.amount - 1) * item.price }
            : item
        );
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        return prevCart.filter(item => item.menuID !== menuID);
      }
    });
  };
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
  const { totalCost, totalItems } = useMemo(() => {
    return cart.reduce(
      (acc, item) => {
        acc.totalCost += item.totalCost;
        acc.totalItems += item.amount;
        return acc;
      },
      { totalCost: 0, totalItems: 0 }
    );
  }, [cart]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  const handleSubmitOrder = async () => {
    if (cart.length === 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
      return;
    }
    setIsSubmitting(true);
    try {
      // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏¥‡∏á API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Order
      console.log("Submitting Order:", {
        orderNo: orderInfo.orderNo,
        details: cart,
      });
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ API call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await new Promise(resolve => setTimeout(resolve, 1500)); 
      alert(`‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${orderInfo.tableNo} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      setCart([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    } catch (error) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
    } finally {
      setIsSubmitting(false);
    }
  };

  const getItemAmountInCart = (menuID: number) => {
    return cart.find(item => item.menuID === menuID)?.amount || 0;
  }

  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      {/* ‡πÉ‡∏ä‡πâ max-w-md ‡πÅ‡∏•‡∏∞ mx-auto ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ö‡∏ô‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà */}
      <div className="max-w-md mx-auto bg-white shadow-lg min-h-screen">
        {/* Header */}
        <header className="p-4 border-b sticky top-0 bg-white z-10">
          <h1 className="text-xl font-bold text-gray-800">‡πÇ‡∏ï‡πä‡∏∞ {orderInfo.tableNo}</h1>
          <p className="text-sm text-gray-500">Order #{orderInfo.orderNo}</p>
        </header>

        {/* Menu List */}
        <div className="pb-32"> {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° padding-bottom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ content ‡πÇ‡∏î‡∏ô footer ‡∏ö‡∏±‡∏á */}
          {menuTypes.map(type => (
            <section key={type.typeID} className="pt-4">
              <h2 className="font-bold text-lg px-4 mb-2 text-gray-700">{type.name}</h2>
              <div className="space-y-2">
                {type.menus?.map(menu => (
                  <div key={menu.menuID} className={`px-4 py-3 flex items-center gap-4 ${!menu.isAvailable ? 'opacity-40' : ''}`}>
                    <Image src={menu.image || '/images/placeholder.jpg'} alt={menu.name} width={80} height={80} className="rounded-md object-cover w-20 h-20 flex-shrink-0" />
                    <div className="flex-grow">
                      <p className="font-semibold text-gray-800">{menu.name}</p>
                      <p className="text-sm text-gray-600">‡∏ø{menu.price.toFixed(2)}</p>
                       {!menu.isAvailable && <p className="text-xs text-red-500 font-bold">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î</p>}
                    </div>
                    {menu.isAvailable && (
                      <div className="flex items-center gap-2">
                        {getItemAmountInCart(menu.menuID) > 0 && (
                          <>
                            <button onClick={() => handleRemoveItem(menu.menuID)} className="bg-gray-200 text-gray-800 rounded-full w-7 h-7 font-bold text-lg flex items-center justify-center">-</button>
                            <span className="font-semibold w-5 text-center">{getItemAmountInCart(menu.menuID)}</span>
                          </>
                        )}
                        <button onClick={() => handleAddItem(menu)} className="bg-orange-500 text-white rounded-full w-7 h-7 font-bold text-lg flex items-center justify-center">+</button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </section>
          ))}
        </div>

        {/* Order Summary Footer */}
        {totalItems > 0 && (
          <footer className="fixed bottom-0 left-0 right-0 max-w-md mx-auto bg-white border-t shadow-inner">
            <div className="p-4">
              <div className="flex justify-between items-center mb-2">
                <span className="text-gray-600">{totalItems} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                <span className="font-bold text-xl text-gray-800">‡∏£‡∏ß‡∏° ‡∏ø{totalCost.toFixed(2)}</span>
              </div>
              <button 
                onClick={handleSubmitOrder} 
                disabled={isSubmitting}
                className="w-full bg-green-500 text-white font-bold py-3 rounded-lg hover:bg-green-600 disabled:bg-gray-300 transition-colors"
              >
                {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}
              </button>
            </div>
          </footer>
        )}
      </div>
    </div>
  );
}