// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// prisma/schema.prisma

model Admin {
  adminID  String   @id @default(uuid())
  email    String   @unique
  password String
  name     String
  surname  String
  image    String
  fileID   String
  role     String   @default("admin")
  dateTime DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Table {
  tableNo        Int      @id @default(autoincrement())
  locationDetail String
  dateTime       DateTime @default(now())
  updateAt       DateTime @updatedAt
  orders         Orders[]
}

model ServiceState {
  serviceID   Int      @id @default(autoincrement())
  serviceName String
  orders      Orders[]
}

model Orders {
  orderNo   Int      @id @default(autoincrement())
  tableNo   Int
  serviceID Int
  dateTime  DateTime @default(now())
  updateAt  DateTime @updatedAt
  role      String   @default("customer")

  table    Table         @relation(fields: [tableNo], references: [tableNo])
  service  ServiceState  @relation(fields: [serviceID], references: [serviceID])
  details  OrderDetail[]
  payments Payment[]
}

model OrderDetail {
  detailNo     Int      @id @default(autoincrement())
  orderNo      Int
  menuID       Int
  trackOrderID Int
  amount       Int
  description  String?
  place        String
  price        Decimal  @db.Decimal(10, 2)
  totalCost    Decimal  @db.Decimal(10, 2)
  dateTime     DateTime @default(now())
  updateAT     DateTime @updatedAt

  order Orders     @relation(fields: [orderNo], references: [orderNo])
  menu  MenuLists  @relation(fields: [menuID], references: [menuID])
  track OrderTrack @relation(fields: [trackOrderID], references: [trackOrderID])

  cancelLog CancelOrderLog? // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (nullable)
}

model CancelOrderLog {
  cancelLog   Int      @id @default(autoincrement())
  detailNo    Int      @unique // üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ 1 detailNo ‡∏°‡∏µ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 record
  orderNo     Int
  description String
  cancelBy    String
  createAt    DateTime @default(now())

  detail OrderDetail @relation(fields: [detailNo], references: [detailNo])
}

model OrderTrack {
  trackOrderID   Int           @id @default(autoincrement())
  trackStateName String
  details        OrderDetail[]
}

model MenuLists {
  menuID      Int      @id @default(autoincrement())
  name        String   @unique
  price       Decimal  @db.Decimal(10, 2) // ‡πÉ‡∏ä‡πâ Decimal
  isAvailable Boolean  @default(true)
  image       String
  fileID      String
  typeID      Int
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  type    MenuType      @relation(fields: [typeID], references: [typeID])
  details OrderDetail[]

  Recommended Recommended[]
}

model MenuType {
  typeID Int         @id @default(autoincrement())
  name   String      @unique
  menus  MenuLists[]
}

model Payment {
  paymentNo Int           @id @default(autoincrement())
  orderNo   Int           @unique
  totalCost Decimal       @db.Decimal(10, 2) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Decimal
  dateTime  DateTime      @default(now())
  updateAt  DateTime      @updatedAt
  status    PaymentStatus // enum ‡πÅ‡∏ó‡∏ô paymentConfirm
  staffID   String?
  methodID  Int
  image     String?
  fileID    String?

  order  Orders    @relation(fields: [orderNo], references: [orderNo])
  staff  Staff?    @relation(fields: [staffID], references: [staffID])
  method PayMethod @relation(fields: [methodID], references: [methodID])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model PayMethod {
  methodID   Int       @id @default(autoincrement())
  methodName String
  payments   Payment[]
}

model Staff {
  staffNo  Int      @unique @default(autoincrement())
  staffID  String   @id @default(uuid())
  name     String
  surname  String
  telNo    String   @unique
  email    String   @unique
  password String
  image    String?
  fileID   String?
  role     String   @default("staff")
  dateTime DateTime @default(now())
  updateAt DateTime @updatedAt

  payments  Payment[]
  loginLogs LoginLog[]
  FcmToken  FcmToken[]
}

model LoginLog {
  logNo       Int      @id @default(autoincrement())
  staffID     String
  loginResult String
  dateTime    DateTime @default(now())

  staff Staff @relation(fields: [staffID], references: [staffID])
}

model FcmToken {
  id        Int      @id @default(autoincrement())
  staffID   String   @unique
  token     String
  createdAt DateTime @default(now())

  // Relation ‡∏Å‡∏±‡∏ö Staff
  staff Staff? @relation(fields: [staffID], references: [staffID])

  @@index([staffID])
}

model Recommended {
  id        Int      @id @default(autoincrement())
  menuID    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menu MenuLists @relation(fields: [menuID], references: [menuID], onDelete: Cascade)
}
